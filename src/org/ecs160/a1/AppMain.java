package org.ecs160.a1;


import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.io.Preferences;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import java.io.IOException;
import java.util.HashMap;
import java.util.Vector;

import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if(current != null){
            current.show();
            return;
        }

        CalculatorForm calculatorDis = new CalculatorForm();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}

class Stack {
    protected static Vector<Double> stack;
    private int cursize;

    public Stack() {
        stack = new Vector<Double>();
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        cursize = 0;
    }

    public double pop(){
        double x = stack.get(stack.size()-1);
        stack.remove(stack.size()-1);
        if (cursize > 0) cursize--;
        if (cursize<4) stack.add(0,0.0);
        return x;
    }

    public void push(Double num) {
        stack.add(num);
        cursize++;
        if (cursize <= 4) stack.remove(0);
    }

    //get values from last four registers and return it as a vector(X,Y,S,T)
    public Vector<Double> getLastFourValues() {
        Vector<Double> fourvalues = new Vector<Double>();
        for (int i = stack.size()-1; i >= stack.size()-4; i--) {
            fourvalues.add(stack.get(i));
        }
        return fourvalues;
    }

    //get values in Register X and Y, and return as a vector
    public Vector<Double> getXY() {
        Vector<Double> xy = new Vector<Double>();
        Double x = stack.get(stack.size()-1);
        pop();
        Double y = stack.get(stack.size()-1);
        pop();
        xy.add(x);
        xy.add(y);
        return xy;
    }

    public void xyInterchange() {
        Vector<Double> xy = getXY();
        push(xy.get(0));
        push(xy.get(1));
    }

    public void clear() {
        stack.clear();
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        cursize = 0;
    }

    public void clearX() {
        pop();
        push(0.0);
    }
}

class NormalModeAlgorithm extends Stack {
    public void plus(){
        Vector<Double> xy = getXY();
        double result = xy.firstElement() + xy.lastElement();
        push(result);
    }

    public void minus(){
        Vector<Double> xy = getXY();
        double result = xy.lastElement() - xy.firstElement();
        push(result);
    }

    public void multiply() {
        Vector<Double> xy = getXY();
        double result = xy.lastElement() * xy.firstElement();
        push(result);
    }

    public void devide() {
        Vector<Double> xy = getXY();
        double result = xy.lastElement() / xy.firstElement();
        push(result);
    }

    public void log() {
        double x = pop();
        double result = Math.log10(x);
        push(result);
    }

    public void ln() {
        double x = pop();
        double result = Math.log(x);
        push(result);
    }

    public void sin() {
        double x = pop();
        double radians = Math.toRadians(x);
        double result = Math.sin(radians);
        push(result);
    }

    public void cos() {
        double x = pop();
        double radians = Math.toRadians(x);
        double result = Math.cos(radians);
        push(result);
    }

    public void tan() {
        double x = pop();
        double radians = Math.toRadians(x);
        double result = Math.tan(radians);
        push(result);
    }

    public void Pi() {
        push(Math.PI);
    }

    public void square() {
        double x = pop();
        double result = Math.pow(x,2);
        push(result);
    }

    public void cube() {
        double x = pop();
        double result = Math.pow(x,3);
        push(result);
    }

    public void yPowerx() {
        Vector<Double> xy = getXY();
        double result = Math.pow(xy.get(1),xy.get(0));
        push(result);
    }

    public void sqrt() {
        double x = pop();
        double result = Math.sqrt(x);
        push(result);
    }
}

class CalculatorForm extends Form{
    Container tRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
    Container sRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
    Container yRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
    Container xRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
    Container display = new Container(new BoxLayout(BoxLayout.Y_AXIS));
    Container sci1 = new Container(new GridLayout(2,1));
    Container sci2 = new Container(new GridLayout(2,1));
    Container sci3 = new Container(new GridLayout(2,1));
    Container sci4 = new Container(new GridLayout(2,1));
    Container sci5 = new Container(new GridLayout(2,1));
    Container sci6 = new Container(new GridLayout(2,1));
    Container keyboard = new Container(new GridLayout(5,5));

    private String command = new String("");
    private NormalModeAlgorithm normalal = new NormalModeAlgorithm();
    private List list = new List();

    public CalculatorForm() {
        setLayout(new BorderLayout());
        setTitle("RPN Calculator V0.01");

        TextComponent t = new TextComponent().label("T:");
        tRegister.add(t);
        display.add(tRegister);

        TextComponent s = new TextComponent().label("S:");
        sRegister.add(s);
        display.add(sRegister);

        TextComponent y = new TextComponent().label("Y:");
        yRegister.add(y);
        display.add(yRegister);

        TextComponent x = new TextComponent().label("X:_");
        xRegister.add(x);
        display.add(xRegister);

        TextField input = new TextField();
        display.add(input);


        Button sin = new Button ("sin");
        sin.getUnselectedStyle().setBgTransparency(255);
        sin.getUnselectedStyle().setFgColor(0x000000);
        sin.getAllStyles().setPadding(Component.TOP, 5);
        sin.getAllStyles().setPadding(Component.BOTTOM, 5);
        sin.getAllStyles().setPadding(Component.LEFT, 3);
        sin.getAllStyles().setPadding(Component.RIGHT, 3);
        sin.getAllStyles().setMargin(Component.TOP, 10);
        sin.getAllStyles().setMargin(Component.BOTTOM, 10);
        sin.getAllStyles().setMargin(Component.LEFT, 10);
        sin.getAllStyles().setMargin(Component.RIGHT, 10);
        sin.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        sin.getAllStyles().setBgColor(0xff9900);
        sin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.sin();
                showXYST(normalal.getLastFourValues());
                //list.saveList("List1");
            }
        });

        Button square = new Button ("x^2");
        square.getUnselectedStyle().setBgTransparency(255);
        square.getUnselectedStyle().setFgColor(0x000000);
        square.getAllStyles().setPadding(Component.TOP, 5);
        square.getAllStyles().setPadding(Component.BOTTOM, 5);
        square.getAllStyles().setPadding(Component.LEFT, 3);
        square.getAllStyles().setPadding(Component.RIGHT, 3);
        square.getAllStyles().setMargin(Component.TOP, 10);
        square.getAllStyles().setMargin(Component.BOTTOM, 10);
        square.getAllStyles().setMargin(Component.LEFT, 10);
        square.getAllStyles().setMargin(Component.RIGHT, 10);
        square.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        square.getAllStyles().setBgColor(0xff9900);
        square.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.square();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button cos = new Button("cos");
        cos.getUnselectedStyle().setBgTransparency(255);
        cos.getUnselectedStyle().setFgColor(0x000000);
        cos.getAllStyles().setMargin(Component.TOP, 10);
        cos.getAllStyles().setMargin(Component.BOTTOM, 10);
        cos.getAllStyles().setMargin(Component.LEFT, 10);
        cos.getAllStyles().setMargin(Component.RIGHT, 10);
        cos.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        cos.getAllStyles().setBgColor(0xff9900);
        cos.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.cos();
                showXYST(normalal.getLastFourValues());

                //list.loadList("List1");
                //showXYST(normalal.getLastFourValues());
            }
        });

        Button cube = new Button ("x^3");
        cube.getUnselectedStyle().setBgTransparency(255);
        cube.getUnselectedStyle().setFgColor(0x000000);
        cube.getAllStyles().setMargin(Component.TOP, 10);
        cube.getAllStyles().setMargin(Component.BOTTOM, 10);
        cube.getAllStyles().setMargin(Component.LEFT, 10);
        cube.getAllStyles().setMargin(Component.RIGHT, 10);
        cube.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        cube.getAllStyles().setBgColor(0xff9900);
        cube.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.cube();
                showXYST(normalal.getLastFourValues());

            }
        });

        Button tan = new Button("tan");
        tan.getUnselectedStyle().setBgTransparency(255);
        tan.getUnselectedStyle().setFgColor(0x000000);
        tan.getAllStyles().setMargin(Component.TOP, 10);
        tan.getAllStyles().setMargin(Component.BOTTOM, 10);
        tan.getAllStyles().setMargin(Component.LEFT, 10);
        tan.getAllStyles().setMargin(Component.RIGHT, 10);
        tan.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        tan.getAllStyles().setBgColor(0xff9900);
        tan.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.tan();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button SQRT = new Button ("SQRT");
        SQRT.getUnselectedStyle().setBgTransparency(255);
        SQRT.getUnselectedStyle().setFgColor(0x000000);
        SQRT.getAllStyles().setMargin(Component.TOP, 10);
        SQRT.getAllStyles().setMargin(Component.BOTTOM, 10);
        SQRT.getAllStyles().setMargin(Component.LEFT, 10);
        SQRT.getAllStyles().setMargin(Component.RIGHT, 10);
        SQRT.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        SQRT.getAllStyles().setBgColor(0xff9900);
        SQRT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.sqrt();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button Log = new Button("Log");
        Log.getUnselectedStyle().setBgTransparency(255);
        Log.getUnselectedStyle().setFgColor(0x000000);
        Log.getAllStyles().setMargin(Component.TOP, 10);
        Log.getAllStyles().setMargin(Component.BOTTOM, 10);
        Log.getAllStyles().setMargin(Component.LEFT, 10);
        Log.getAllStyles().setMargin(Component.RIGHT, 10);
        Log.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        Log.getAllStyles().setBgColor(0xff9900);
        Log.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.log();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button Pi = new Button ("Pi");
        Pi.getUnselectedStyle().setBgTransparency(255);
        Pi.getUnselectedStyle().setFgColor(0x000000);
        Pi.getAllStyles().setMargin(Component.TOP, 10);
        Pi.getAllStyles().setMargin(Component.BOTTOM, 10);
        Pi.getAllStyles().setMargin(Component.LEFT, 10);
        Pi.getAllStyles().setMargin(Component.RIGHT, 10);
        Pi.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        Pi.getAllStyles().setBgColor(0xff9900);
        Pi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                } else {
                    normalal.pop();
                }
                command = "";
                normalal.Pi();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button Ln = new Button("Ln");
        Ln.getUnselectedStyle().setBgTransparency(255);
        Ln.getUnselectedStyle().setFgColor(0x000000);
        Ln.getAllStyles().setMargin(Component.TOP, 10);
        Ln.getAllStyles().setMargin(Component.BOTTOM, 10);
        Ln.getAllStyles().setMargin(Component.LEFT, 10);
        Ln.getAllStyles().setMargin(Component.RIGHT, 10);
        Ln.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        Ln.getAllStyles().setBgColor(0xff9900);
        Ln.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.ln();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button E = new Button ("E");
        E.getUnselectedStyle().setBgTransparency(255);
        E.getUnselectedStyle().setFgColor(0x000000);
        E.getAllStyles().setMargin(Component.TOP, 10);
        E.getAllStyles().setMargin(Component.BOTTOM, 10);
        E.getAllStyles().setMargin(Component.LEFT, 10);
        E.getAllStyles().setMargin(Component.RIGHT, 10);
        E.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        E.getAllStyles().setBgColor(0xff9900);
        E.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                command += 'E';
                showX(command);
            }
        });

        Button X_Y = new Button("X<->Y");
        X_Y.getUnselectedStyle().setBgTransparency(255);
        X_Y.getUnselectedStyle().setFgColor(0x000000);
        X_Y.getAllStyles().setMargin(Component.TOP, 10);
        X_Y.getAllStyles().setMargin(Component.BOTTOM, 10);
        X_Y.getAllStyles().setMargin(Component.LEFT, 10);
        X_Y.getAllStyles().setMargin(Component.RIGHT, 10);
        X_Y.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        X_Y.getAllStyles().setBgColor(0xff9900);
        X_Y.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.xyInterchange();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button POP = new Button ("POP");
        POP.getUnselectedStyle().setBgTransparency(255);
        POP.getUnselectedStyle().setFgColor(0x000000);
        POP.getAllStyles().setMargin(Component.TOP, 10);
        POP.getAllStyles().setMargin(Component.BOTTOM, 10);
        POP.getAllStyles().setMargin(Component.LEFT, 10);
        POP.getAllStyles().setMargin(Component.RIGHT, 10);
        POP.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        POP.getAllStyles().setBgColor(0xff9900);
        POP.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                normalal.pop();
                showXYST(normalal.getLastFourValues());
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    showX(command);
                } else {
                    command = "";
                }

            }
        });

        Button num_7 = new Button ("7");
        num_7.getUnselectedStyle().setBgTransparency(255);
        num_7.getUnselectedStyle().setFgColor(0x000000);
        num_7.getAllStyles().setMargin(Component.TOP, 10);
        num_7.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_7.getAllStyles().setMargin(Component.LEFT, 10);
        num_7.getAllStyles().setMargin(Component.RIGHT, 10);
        num_7.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_7.getAllStyles().setBgColor(0xff9900);
        num_7.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "7";
                showX(command);
            }
        });

        Button num_8 = new Button ("8");
        num_8.getUnselectedStyle().setBgTransparency(255);
        num_8.getUnselectedStyle().setFgColor(0x000000);
        num_8.getAllStyles().setMargin(Component.TOP, 10);
        num_8.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_8.getAllStyles().setMargin(Component.LEFT, 10);
        num_8.getAllStyles().setMargin(Component.RIGHT, 10);
        num_8.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_8.getAllStyles().setBgColor(0xff9900);
        num_8.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "8";
                showX(command);
            }
        });

        Button num_9 = new Button ("9");
        num_9.getUnselectedStyle().setBgTransparency(255);
        num_9.getUnselectedStyle().setFgColor(0x000000);
        num_9.getAllStyles().setMargin(Component.TOP, 10);
        num_9.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_9.getAllStyles().setMargin(Component.LEFT, 10);
        num_9.getAllStyles().setMargin(Component.RIGHT, 10);
        num_9.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_9.getAllStyles().setBgColor(0xff9900);
        num_9.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "9";
                showX(command);
            }
        });

        Button divide = new Button ("/");
        divide.getUnselectedStyle().setBgTransparency(255);
        divide.getUnselectedStyle().setFgColor(0x000000);
        divide.getAllStyles().setMargin(Component.TOP, 10);
        divide.getAllStyles().setMargin(Component.BOTTOM, 10);
        divide.getAllStyles().setMargin(Component.LEFT, 10);
        divide.getAllStyles().setMargin(Component.RIGHT, 10);
        divide.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        divide.getAllStyles().setBgColor(0xff9900);
        divide.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.devide();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button clr = new Button ("CLR");
        clr.getUnselectedStyle().setBgTransparency(255);
        clr.getUnselectedStyle().setFgColor(0x000000);
        clr.getAllStyles().setMargin(Component.TOP, 10);
        clr.getAllStyles().setMargin(Component.BOTTOM, 10);
        clr.getAllStyles().setMargin(Component.LEFT, 10);
        clr.getAllStyles().setMargin(Component.RIGHT, 10);
        clr.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        clr.getAllStyles().setBgColor(0xff9900);
        clr.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                normalal.clear();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button num_4 = new Button ("4");
        num_4.getUnselectedStyle().setBgTransparency(255);
        num_4.getUnselectedStyle().setFgColor(0x000000);
        num_4.getAllStyles().setMargin(Component.TOP, 10);
        num_4.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_4.getAllStyles().setMargin(Component.LEFT, 10);
        num_4.getAllStyles().setMargin(Component.RIGHT, 10);
        num_4.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_4.getAllStyles().setBgColor(0xff9900);
        num_4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "4";
                showX(command);
            }
        });

        Button num_5 = new Button ("5");
        num_5.getUnselectedStyle().setBgTransparency(255);
        num_5.getUnselectedStyle().setFgColor(0x000000);
        num_5.getAllStyles().setMargin(Component.TOP, 10);
        num_5.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_5.getAllStyles().setMargin(Component.LEFT, 10);
        num_5.getAllStyles().setMargin(Component.RIGHT, 10);
        num_5.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_5.getAllStyles().setBgColor(0xff9900);
        num_5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "5";
                showX(command);
            }
        });

        Button num_6 = new Button ("6");
        num_6.getUnselectedStyle().setBgTransparency(255);
        num_6.getUnselectedStyle().setFgColor(0x000000);
        num_6.getAllStyles().setMargin(Component.TOP, 10);
        num_6.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_6.getAllStyles().setMargin(Component.LEFT, 10);
        num_6.getAllStyles().setMargin(Component.RIGHT, 10);
        num_6.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_6.getAllStyles().setBgColor(0xff9900);
        num_6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "6";
                showX(command);
            }
        });

        Button multiply = new Button ("*");
        multiply.getUnselectedStyle().setBgTransparency(255);
        multiply.getUnselectedStyle().setFgColor(0x000000);
        multiply.getAllStyles().setMargin(Component.TOP, 10);
        multiply.getAllStyles().setMargin(Component.BOTTOM, 10);
        multiply.getAllStyles().setMargin(Component.LEFT, 10);
        multiply.getAllStyles().setMargin(Component.RIGHT, 10);
        multiply.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        multiply.getAllStyles().setBgColor(0xff9900);
        multiply.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.multiply();
                showXYST(normalal.getLastFourValues());
            }
        });


        Button delete = new Button ("<-");
        delete.getUnselectedStyle().setBgTransparency(255);
        delete.getUnselectedStyle().setFgColor(0x000000);
        delete.getAllStyles().setMargin(Component.TOP, 10);
        delete.getAllStyles().setMargin(Component.BOTTOM, 10);
        delete.getAllStyles().setMargin(Component.LEFT, 10);
        delete.getAllStyles().setMargin(Component.RIGHT, 10);
        delete.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        delete.getAllStyles().setBgColor(0xff9900);
        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    command = command.substring(0,command.length()-1);
                    showX(command);
                } else {
                    normalal.clearX();
                    command = "*";
                    showXYST(normalal.getLastFourValues());
                }
            }
        });

        Button num_1 = new Button ("1");
        num_1.getUnselectedStyle().setBgTransparency(255);
        num_1.getUnselectedStyle().setFgColor(0x000000);
        num_1.getAllStyles().setMargin(Component.TOP, 10);
        num_1.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_1.getAllStyles().setMargin(Component.LEFT, 10);
        num_1.getAllStyles().setMargin(Component.RIGHT, 10);
        num_1.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_1.getAllStyles().setBgColor(0xff9900);
        num_1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "1";
                showX(command);
            }
        });

        Button num_2 = new Button ("2");
        num_2.getUnselectedStyle().setBgTransparency(255);
        num_2.getUnselectedStyle().setFgColor(0x000000);
        num_2.getAllStyles().setMargin(Component.TOP, 10);
        num_2.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_2.getAllStyles().setMargin(Component.LEFT, 10);
        num_2.getAllStyles().setMargin(Component.RIGHT, 10);
        num_2.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_2.getAllStyles().setBgColor(0xff9900);
        num_2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }

                command += "2";
                showX(command);
            }
        });

        Button num_3 = new Button ("3");
        num_3.getUnselectedStyle().setBgTransparency(255);
        num_3.getUnselectedStyle().setFgColor(0x000000);
        num_3.getAllStyles().setMargin(Component.TOP, 10);
        num_3.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_3.getAllStyles().setMargin(Component.LEFT, 10);
        num_3.getAllStyles().setMargin(Component.RIGHT, 10);
        num_3.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_3.getAllStyles().setBgColor(0xff9900);
        num_3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "3";
                showX(command);
            }
        });

        Button minus = new Button ("-");
        minus.getUnselectedStyle().setBgTransparency(255);
        minus.getUnselectedStyle().setFgColor(0x000000);
        minus.getAllStyles().setMargin(Component.TOP, 10);
        minus.getAllStyles().setMargin(Component.BOTTOM, 10);
        minus.getAllStyles().setMargin(Component.LEFT, 10);
        minus.getAllStyles().setMargin(Component.RIGHT, 10);
        minus.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        minus.getAllStyles().setBgColor(0xff9900);
        minus.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.minus();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button ent = new Button ("ENT");
        ent.getUnselectedStyle().setBgTransparency(255);
        ent.getUnselectedStyle().setFgColor(0x000000);
        ent.getAllStyles().setMargin(Component.TOP, 10);
        ent.getAllStyles().setMargin(Component.BOTTOM, 10);
        ent.getAllStyles().setMargin(Component.LEFT, 10);
        ent.getAllStyles().setMargin(Component.RIGHT, 10);
        ent.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        ent.getAllStyles().setBgColor(0xff9900);
        ent.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Double x;
                if (!command.isEmpty()) {
                    if (command.contains("E")) {
                        x = Double.parseDouble(command.substring(0,command.indexOf('E')));
                        x *= Math.pow(10,Double.parseDouble(command.substring(command.indexOf('E')+1)));
                    } else if (command.charAt(0)=='*'){
                        x = normalal.pop();
                        normalal.push(x);
                    } else {
                        x = Double.parseDouble(command);
                    }
                    normalal.pop();
                } else {
                    x = normalal.pop();
                }

                normalal.push(x);
                normalal.push(x);
                command = "*";
                showXYST(normalal.getLastFourValues());
            }
        });


        Button num_0 = new Button ("0");
        num_0.getUnselectedStyle().setBgTransparency(255);
        num_0.getUnselectedStyle().setFgColor(0x000000);
        num_0.getAllStyles().setMargin(Component.TOP, 10);
        num_0.getAllStyles().setMargin(Component.BOTTOM, 10);
        num_0.getAllStyles().setMargin(Component.LEFT, 10);
        num_0.getAllStyles().setMargin(Component.RIGHT, 10);
        num_0.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        num_0.getAllStyles().setBgColor(0xff9900);
        num_0.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                } else {
                    if (command.charAt(0) == '*') command = "";
                }

                command += "0";
                showX(command);
            }
        });

        Button dot = new Button (".");
        dot.getUnselectedStyle().setBgTransparency(255);
        dot.getUnselectedStyle().setFgColor(0x000000);
        dot.getAllStyles().setMargin(Component.TOP, 10);
        dot.getAllStyles().setMargin(Component.BOTTOM, 10);
        dot.getAllStyles().setMargin(Component.LEFT, 10);
        dot.getAllStyles().setMargin(Component.RIGHT, 10);
        dot.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        dot.getAllStyles().setBgColor(0xff9900);
        dot.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                command += ".";
                showX(command);
            }
        });

        Button polyn = new Button ("Y^X");
        polyn.getUnselectedStyle().setBgTransparency(255);
        polyn.getUnselectedStyle().setFgColor(0x000000);
        polyn.getAllStyles().setMargin(Component.TOP, 10);
        polyn.getAllStyles().setMargin(Component.BOTTOM, 10);
        polyn.getAllStyles().setMargin(Component.LEFT, 10);
        polyn.getAllStyles().setMargin(Component.RIGHT, 10);
        polyn.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        polyn.getAllStyles().setBgColor(0xff9900);
        polyn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.yPowerx();
                showXYST(normalal.getLastFourValues());
            }
        });

        Button add = new Button ("+");
        add.getUnselectedStyle().setBgTransparency(255);
        add.getUnselectedStyle().setFgColor(0x000000);
        add.getAllStyles().setMargin(Component.TOP, 10);
        add.getAllStyles().setMargin(Component.BOTTOM, 10);
        add.getAllStyles().setMargin(Component.LEFT, 10);
        add.getAllStyles().setMargin(Component.RIGHT, 10);
        add.getAllStyles().setBorder(Border.createDashedBorder(4, ColorUtil.BLACK));
        add.getAllStyles().setBgColor(0xff9900);
        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.plus();
                showXYST(normalal.getLastFourValues());
            }
        });

        sci1.add(sin); sci1.add(square);
        sci2.add(cos); sci2.add(cube);
        sci3.add(tan); sci3.add(SQRT);
        sci4.add(Log); sci4.add(Pi);
        sci5.add(Ln); sci5.add(E);
        sci6.add(X_Y); sci6.add(POP);

        keyboard.add(sci1);
        keyboard.add(sci2);
        keyboard.add(sci3);
        keyboard.add(sci4);
        keyboard.add(sci5);
        keyboard.add(sci6);
        keyboard.add(num_7);
        keyboard.add(num_8);
        keyboard.add(num_9);
        keyboard.add(divide);
        keyboard.add(clr);
        keyboard.add(num_4);
        keyboard.add(num_5);
        keyboard.add(num_6);
        keyboard.add(multiply);
        keyboard.add(delete);
        keyboard.add(num_1);
        keyboard.add(num_2);
        keyboard.add(num_3);
        keyboard.add(minus);
        keyboard.add(ent);
        keyboard.add(num_0);
        keyboard.add(dot);
        keyboard.add(polyn);
        keyboard.add(add);

        add(BorderLayout.NORTH, display);
        add(BorderLayout.CENTER, keyboard);
        showForm();
        show();
    }

    public void showForm() {
        Toolbar toolbar = new Toolbar();
        setToolbar(toolbar);
        Toolbar.setOnTopSideMenu(false);
        toolbar.addCommandToSideMenu ("+", null, (e) -> {
            TextField tf = new TextField("", "File Name", 20, TextField.ANY);
            Command ok = new Command("OK");
            Command cancel = new Command("Cancel");
            Command result = Dialog.show("File Name", BorderLayout.north(tf), ok, cancel);
            if(ok == result) {
                list.saveList(tf.getText());
                createFileEntry(toolbar, tf.getText());
                getContentPane().animateLayout(250);
            }
        });

        for(String file : list.getAllList()) {
            createFileEntry(toolbar, file);
        }
    }

    private void createFileEntry(Toolbar toolbar,String file) {
        Label fileField = new Label(file);
            Button delete = new Button();
            Button view = new Button();
            FontImage.setMaterialIcon(delete, FontImage.MATERIAL_DELETE);
            FontImage.setMaterialIcon(view, FontImage.MATERIAL_OPEN_IN_NEW);
            Container content = BorderLayout.center(fileField);
            content.add(BorderLayout.EAST, BoxLayout.encloseX( delete, view));
            delete.addActionListener((e) -> {
                list.deleteList(file);
                content.setY(getWidth());
                toolbar.removeComponent(content);
            });
            view.addActionListener((e) -> {
                list.loadList(file);
                showXYST(normalal.getLastFourValues());
                command = "";
                show();
            });
            toolbar.addComponentToLeftSideMenu(content);
    }

    public void showX(String x) {
        TextComponent tex = new TextComponent().label("X:" + x + "_");
        xRegister.removeAll();
        xRegister.add(tex);
        this.show();
    }

    public void showXYST(Vector<Double> xyst) {
        TextComponent x = new TextComponent().label("X:" + xyst.get(0).toString());
        TextComponent y = new TextComponent().label("Y:" + xyst.get(1).toString());
        TextComponent s = new TextComponent().label("S:" + xyst.get(2).toString());
        TextComponent t = new TextComponent().label("T:" + xyst.get(3).toString());
        xRegister.removeAll();
        yRegister.removeAll();
        sRegister.removeAll();
        tRegister.removeAll();
        xRegister.add(x);
        yRegister.add(y);
        sRegister.add(s);
        tRegister.add(t);
        this.show();
    }

}

class List extends Stack {
    private Vector<String> list;
    private String curlistname;
    private int size;

    public List() {
        list = new Vector<String>();
        curlistname = new String("No list loaded");
        String alllist = Preferences.get("allList", null);
        String listname = "";

        if (alllist != null) {
            alllist += "!";
            for (int i = 0; i < alllist.length(); i++) {
                if (alllist.charAt(i) != '!') {
                    listname += alllist.charAt(i);
                } else {
                    list.add(listname);
                    listname = "";
                }
            }
            if (list.elementAt(0).equals("null")) {
                list.remove(0);
            }
        }

        size = list.size();
    }

    public void saveList(String listname){
        String data = stack.toString();
        data = data.substring(1,data.length()-1).replace(","," ");
        Preferences.set(listname, data);
        Preferences.set("allList",Preferences.get("allList",null)+"!"+ listname);
        list.add(listname);
        size++;
        curlistname = listname;
    }

    public void loadList(String listname){
        String data = Preferences.get(listname,null);
        String num = "";
        for (int i = 0; i < data.length(); i++) {
            char c = data.charAt(i);
            if (c != ' ') {
                num += c;
            } else {
                if (!num.isEmpty()) {
                    push(Double.parseDouble(num));
                    num = "";
                }
            }
        }
        curlistname = listname;
    }

    public void deleteList(String listname) {
        Preferences.delete(listname);
        list.removeElement(listname);
        String allList = new String("");
        for (String i:list){
            allList += i;
            allList += "!";
        }
        allList = allList.substring(0,allList.length()-1);
        Preferences.set("allList", allList);
        size--;
    }

    public Vector<String> getAllList() {
        return (Vector)list.clone();
    }

    public String getCurList() {
        return curlistname;
    }

    public int getSize() {
        return size;
    }
}