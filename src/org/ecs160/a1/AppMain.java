package org.ecs160.a1;


import static com.codename1.ui.CN.*;

import com.codename1.charts.util.ColorUtil;
import com.codename1.io.Preferences;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.Vector;

import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if(current != null){
            current.show();
            return;
        }
        CalculatorForm calculatorDis = new CalculatorForm();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}

class Stack {
    protected static Vector<Double> stack;
    private static int cursize;

    public Stack() {
        stack = new Vector<Double>();
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        cursize = 0;
    }

    public double pop(){
        double x = stack.get(stack.size()-1);
        stack.remove(stack.size()-1);
        if (cursize > 0) cursize--;
        if (cursize<4) stack.add(0,0.0);
        return x;
    }

    public void push(Double num) {
        stack.add(num);
        cursize++;
        if (cursize <= 4) stack.remove(0);
    }

    //get values from last four registers and return it as a vector(X,Y,S,T)
    public Vector<Double> getLastFourValues() {
        Vector<Double> fourvalues = new Vector<Double>();
        for (int i = stack.size()-1; i >= stack.size()-4; i--) {
            fourvalues.add(stack.get(i));
        }
        return fourvalues;
    }

    //get values in Register X and Y, and return as a vector
    public Vector<Double> getXY() {
        Vector<Double> xy = new Vector<Double>();
        Double x = stack.get(stack.size()-1);
        pop();
        Double y = stack.get(stack.size()-1);
        pop();
        xy.add(x);
        xy.add(y);
        return xy;
    }

    public void xyInterchange() {
        Vector<Double> xy = getXY();
        push(xy.get(0));
        push(xy.get(1));
    }

    public void clear() {
        stack.clear();
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        stack.add(0.0);
        cursize = 0;
    }

    public void clearX() {
        pop();
        push(0.0);
    }

    public void roll() {
        Double num = stack.lastElement();
        stack.add(0,num);
        cursize = stack.size();
        pop();
    }

    public int getCursize() {
        return cursize;
    }

    public void setCursize(int size){
        cursize = size;
    }
}

class NormalModeAlgorithm extends Stack {
    public void plus(){
        Vector<Double> xy = getXY();
        double result = xy.firstElement() + xy.lastElement();
        push(result);
    }

    public void minus(){
        Vector<Double> xy = getXY();
        double result = xy.lastElement() - xy.firstElement();
        push(result);
    }

    public void multiply() {
        Vector<Double> xy = getXY();
        double result = xy.lastElement() * xy.firstElement();
        push(result);
    }

    public void divide() {
        Vector<Double> xy = getXY();
        double result = xy.lastElement() / xy.firstElement();
        push(result);
    }

    public void log() {
        double x = pop();
        double result = Math.log10(x);
        push(result);
    }

    public void ln() {
        double x = pop();
        double result = Math.log(x);
        push(result);
    }

    public void square() {
        double x = pop();
        double result = Math.pow(x,2);
        push(result);
    }

    public void cube() {
        double x = pop();
        double result = Math.pow(x,3);
        push(result);
    }

    public void yPowerx() {
        Vector<Double> xy = getXY();
        double result = Math.pow(xy.get(1),xy.get(0));
        push(result);
    }

    public void sqrt() {
        double x = pop();
        double result = Math.sqrt(x);
        push(result);
    }
}

class Curve extends Stack {
    /*
    * Offers three curving methods: root curve, bell curve, and linear curve. This presently doesn't work right if you
    * want the average of only a single grade. Also computes 5 essential statistics: high, low, mean, median, and mode.
    * Also has helper functions to compute the difference of those 5 statistics.
    */
    protected Vector<Double> curvedGrades;
    private Vector<Double> statData;

    public Curve() {
        curvedGrades = new Vector<Double>(0);
        statData = new Vector<Double>(0);
    }

    /*
     * rootCurve() computes the root curve based off some values 0 < a < 1, then pushes some vital stats onto the stack.
     */
    public void rootCurve() {
        double hi = -1, mean = -1, low = -1, median = -1, mode = -1;
        double a = pop();
        if (a > 0.0 && a < 1.0) {
            for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
                double x = stack.get(i);
                x = Math.pow(100, 1 - a) * Math.pow(x, a);
                curvedGrades.add(x);
            }
            hi = hiDiff();
            mean = meanDiff();
            low = lowDiff();
            median = medianDiff();
            mode = modeDiff();
        }
        statData.clear();
        statData.add(hi);
        statData.add(mean);
        statData.add(low);
        statData.add(median);
        statData.add(mode);
        curvedGrades.clear();
    }

    /*
    * Given some data points, computes the mean and SD, and pushes that onto the stack.
    */
    public void bellCurve() {
        double mean = meanRaw();
        double mode = modeRaw();
        double median = medianRaw();
        double sd = 0;
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            sd += Math.pow(Math.abs(mean - x), 2);
        }
        sd = Math.sqrt(sd/getCursize());

        statData.clear();
//        statData.add(mean);
//        statData.add(mode);
//        statData.add(median);
        statData.add(sd);
        /*
         * The following present A, B, C, and D cut off scores respectively. F scores are implied as lower than D.
         */
        statData.add(mean + (2*sd));
        statData.add(mean + sd);
        statData.add(mean - sd );
        statData.add(mean - (2*sd));
        curvedGrades.clear();
    }

    /*
    * Shifts the entire class by a given amount according to a linear function y = ax+b. Pushes essential statistics
    * onto the stack.
    */
    public void linearCurve() {
        double b = pop();
        double a = pop();
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            x = a*x + b;
            curvedGrades.add(x);
        }
        double hi = hiDiff(), mean = meanDiff(), low = lowDiff(), median = medianDiff(), mode = modeDiff();
        statData.clear();
        statData.add(hi);
        statData.add(mean);
        statData.add(low);
        statData.add(median);
        statData.add(mode);
        curvedGrades.clear();
    }

    /*
     * Adds a fixed amount to every grade. Useful for a small correction.
     */
    public void flatCurve(){
        double a = pop();
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            x += a;
            curvedGrades.add(x);
        }
        double hi = hiDiff(), mean = meanDiff(), low = lowDiff(), median = medianDiff(), mode = modeDiff();
        statData.clear();
        statData.add(hi);
        statData.add(mean);
        statData.add(low);
        statData.add(median);
        statData.add(mode);
        curvedGrades.clear();
    }

    /*
     * Given four values, computes the a and b for the linear curve.
     */
    public void linearParams(){
        double highFinal = pop();
        double highRaw = pop();
        double lowFinal = pop();
        double lowRaw = pop();

        double a = (highFinal - lowFinal) / (highRaw - lowRaw);
        double b = lowFinal - (a * lowRaw);
        push(a);
        push(b);
    }

    /*
     * Displays essential stats for the raw, uncurved grades. Useful for determining which grades to use for
     * linear curving.
     */
    public void rawStats(){
        statData.clear();
        statData.add(hiRaw());
        statData.add(meanRaw());
        statData.add(lowRaw());
        statData.add(medianRaw());
        statData.add(modeRaw());
    }

    /*
     * Used to show stat data on the screen.
     */
    public Vector<Double> getStatData() {
        return (Vector) statData.clone();
    }

    /*
     * Finds the highest grades of the raw and curved scores, and returns the absolute difference.
     */
    public double hiDiff() {
        return Math.abs(hiCurve() - hiRaw());
    }
    public double hiCurve() {
        double max = Double.MIN_VALUE;
        for(double x: curvedGrades) {
            if (x > max)
                max = x;
        }
        return max;
    }
    public double hiRaw() {
        double max = Double.MIN_VALUE;
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            if (x > max)
                max = x;
        }
        return max;
    }

    /*
     * Computes the mean/average grade of the raw and curved scores, and returns the absolute difference.
     * Note: the mean doesn't actually represent any single student, but instead is a class average.
     */
    public double meanDiff() {
        return Math.abs(meanCurve() - meanRaw());
    }
    public double meanCurve() {
        double sum = 0;
        for (double x : curvedGrades) {
            sum += x;
        }
        return (sum / getCursize());
    }
    public double meanRaw() {
        double sum = 0;
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            sum += x;
        }
        return (sum / getCursize());
    }

    /*
     * Finds the lowest grades of the raw and curved scores, and returns the absolute difference.
     */
    public double lowDiff() {
        return Math.abs(lowCurve() - lowRaw());
    }
    public double lowCurve() {
        double min = Double.MAX_VALUE;
        for (double x : curvedGrades) {
            if (x < min)
                min = x;
        }
        return min;
    }
    public double lowRaw() {
        double min = Double.MAX_VALUE;
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            if (x < min)
                min = x;
        }
        return min;
    }

    /*
     * Finds the median grades of the raw and curved scores, and returns the absolute difference.
     * Note: the median represents the "middle" student, and may not represent the class average.
     */
    public double medianDiff(){
        return Math.abs(medianCurve() - medianRaw());
    }
    public double medianCurve(){
        Vector<Double> sortedGrades = new Vector<>(curvedGrades);
        Collections.sort(sortedGrades);
        int n = getCursize();
        int mid = n/2;
        if ((double)(n % 2) == 0.0){
            return (sortedGrades.get(mid) + sortedGrades.get(mid-1)) / 2.0;
        } else {
            return (sortedGrades.get(mid));
        }// n is odd
    }
    public double medianRaw(){
        Vector<Double> sortedGrades = new Vector<>(stack);
        Collections.sort(sortedGrades);
        int n = getCursize();
        int mid = n/2;
        if ((double)(n % 2) == 0.0){
            return (sortedGrades.get(mid) + sortedGrades.get(mid-1)) / 2.0;
        } else {
            return (sortedGrades.get(mid));
        }// n is odd
    }

    /*
     * Find the most occurring grade of the raw and curved scores, and returns the absolute difference.
     * Note: the mode may not exist. In this case, we return a "-1".```
     */
    public double modeDiff(){
        return Math.abs(modeCurve() - modeRaw());
    }
    public double modeCurve(){
        double mode = 0;
        int count = 0;
        for (double x: curvedGrades) {
            int countTmp = 0;
            for (double y: curvedGrades) {
                if (x == y) {
                    countTmp++;
                }
            }
            if (countTmp > count) {
                count = countTmp;
                mode = x;
            }
        }
        if (count > 1) {
            return mode;
        } else {
            return -1;
        } // if count is 1 (or less somehow), then there are no repetitions
          //  and therefore no mode
    }
    public double modeRaw(){
        double mode = 0;
        int count = 0;
        for (int i = stack.size() - 1; i >= Math.abs(stack.size() - getCursize()); i--) {
            double x = stack.get(i);
            int countTmp = 0;
            for (int j = stack.size() - 1; j >= Math.abs(stack.size() - getCursize()); j--) {
                double y = stack.get(j);
                if (x == y) {
                    countTmp++;
                }
            }
            if (countTmp > count) {
                count = countTmp;
                mode = x;
            }
        }
        if (count > 1) {
            return mode;
        } else {
            return -1;
        } // if count is 1 (or less somehow), then there are no repetitions
        //  and therefore no mode
    }
}

class CalculatorForm extends Form{
    private Container tRegister;
    private Container sRegister;
    private Container yRegister;
    private Container xRegister;
    private Container display;
    private Container sci1;
    private Container sci2;
    private Container sci3;
    private Container sci4;
    private Container sci5;
    private Container sci6;
    private Container sci7;
    private Container keyboard;
    private Container textbar;

    private String command;
    private NormalModeAlgorithm normalal;
    private List list;
    private Curve curveal;
    private int decPlaces;

    public CalculatorForm() {
        tRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
        sRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
        yRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
        xRegister = new Container(new BoxLayout(BoxLayout.X_AXIS));
        display = new Container(new BoxLayout(BoxLayout.Y_AXIS));
        sci1 = new Container(new GridLayout(2,1));
        sci2 = new Container(new GridLayout(2,1));
        sci3 = new Container(new GridLayout(2,1));
        sci4 = new Container(new GridLayout(2,1));
        sci5 = new Container(new GridLayout(2,1));
        sci6 = new Container(new GridLayout(2,1));
        sci7 = new Container(new GridLayout(2,1));
        keyboard = new Container(new GridLayout(5,5));
        textbar = new Container(new BoxLayout(BoxLayout.X_AXIS));

        command = new String("*");
        normalal = new NormalModeAlgorithm();
        list = new List();
        curveal = new Curve();
        decPlaces = 3;

        setLayout(new BorderLayout());
        setTitle("RPN Calculator V0.01");

        TextField t = new TextField("T:");
        tRegister.add(t);
        display.add(tRegister);

        TextComponent s = new TextComponent().label("S:");
        sRegister.add(s);
        display.add(sRegister);

        TextComponent y = new TextComponent().label("Y:");
        yRegister.add(y);
        display.add(yRegister);

        TextComponent x = new TextComponent().label("X:_");
        xRegister.add(x);
        display.add(xRegister);

        TextComponent input = new TextComponent( ).label("");
        textbar.add(input);
        display.add(textbar);


        Button root = new Button ("ROOT");
        root.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                curveal.rootCurve();
                showXYST(normalal.getLastFourValues());
                showTextbar(1);
            }
        });

        Button square = new Button ("x^2");
        square.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.square();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button lin = new Button("LINEAR");
        lin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                curveal.linearCurve();
                showXYST(normalal.getLastFourValues());
                showTextbar(1);
            }
        });

        Button cube = new Button ("x^3");
        cube.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.cube();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button bell = new Button("BELL");
        bell.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                curveal.bellCurve();
                showXYST(normalal.getLastFourValues());
                showTextbar(2);
            }
        });

        Button SQRT = new Button ("SQRT");
        SQRT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.sqrt();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button Param = new Button("PARAM");
        Param.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                curveal.linearParams();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button Fix = new Button ("FIX");
        Fix.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                fix();
                if (normalal.getCursize() == 0) command = "*";
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button Stat = new Button("STAT");
        Stat.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                curveal.rawStats();
                showXYST(normalal.getLastFourValues());
                showTextbar(1);
            }
        });

        Button Flat = new Button ("FLAT");
        Flat.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                curveal.flatCurve();
                showXYST(normalal.getLastFourValues());
                showTextbar(1);
            }
        });

        Button X_Y = new Button("X<->Y");
        X_Y.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.xyInterchange();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button Roll = new Button("ROLL");
        Roll.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.roll();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button POP = new Button ("POP");
        POP.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                normalal.pop();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    showX(command);
                } else {
                    command = "";
                }

            }
        });

        Button num_7 = new Button ("7");
        num_7.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "7";
                showX(command);
            }
        });

        Button num_8 = new Button ("8");
        num_8.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "8";
                showX(command);
            }
        });

        Button num_9 = new Button ("9");
        num_9.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "9";
                showX(command);
            }
        });

        Button divide = new Button ("/");
        divide.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.divide();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button clr = new Button ("CLR");
        clr.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                normalal.clear();
                command = "*";
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button num_4 = new Button ("4");
        num_4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "4";
                showX(command);
            }
        });

        Button num_5 = new Button ("5");
        num_5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "5";
                showX(command);
            }
        });

        Button num_6 = new Button ("6");
        num_6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "6";
                showX(command);
            }
        });

        Button multiply = new Button ("*");
        multiply.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.multiply();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });


        Button delete = new Button ("<-");
        delete.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    command = command.substring(0,command.length()-1);
                    showX(command);
                } else {
                    normalal.clearX();
                    command = "*";
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                }
            }
        });

        Button num_1 = new Button ("1");
        num_1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "1";
                showX(command);
            }
        });

        Button num_2 = new Button ("2");
        num_2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }

                command += "2";
                showX(command);
            }
        });

        Button num_3 = new Button ("3");
        num_3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }
                command += "3";
                showX(command);
            }
        });

        Button minus = new Button ("-");
        minus.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.minus();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button ent = new Button ("ENT");
        ent.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Double x;
                if (!command.isEmpty()) {
                    if (command.contains("E")) {
                        x = Double.parseDouble(command.substring(0,command.indexOf('E')));
                        x *= Math.pow(10,Double.parseDouble(command.substring(command.indexOf('E')+1)));
                    } else if (command.charAt(0)=='*'){
                        x = normalal.pop();
                        normalal.push(x);
                    } else {
                        x = Double.parseDouble(command);
                    }
                    normalal.pop();
                } else {
                    x = normalal.pop();
                }

                normalal.push(x);
                normalal.push(x);
                command = "*";
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });


        Button num_0 = new Button ("0");
        num_0.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (command.isEmpty()) {
                    Double x = normalal.pop();
                    normalal.push(x);
                    normalal.push(x);
                    showXYST(normalal.getLastFourValues());
                    showTextbar(0);
                } else {
                    if (command.charAt(0) == '*') command = "";
                }

                command += "0";
                showX(command);
            }
        });

        Button dot = new Button (".");
        dot.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                command += ".";
                showX(command);
            }
        });

        Button polyn = new Button ("Y^X");
        polyn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.yPowerx();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        Button add = new Button ("+");
        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (!command.isEmpty() && command.charAt(0) != '*') {
                    Double x = Double.parseDouble(command);
                    normalal.pop();
                    normalal.push(x);
                }
                command = "";
                normalal.plus();
                showXYST(normalal.getLastFourValues());
                showTextbar(0);
            }
        });

        sci1.add(root); sci1.add(square);
        sci2.add(lin); sci2.add(cube);
        sci3.add(bell); sci3.add(SQRT);
        sci4.add(Flat); sci4.add(Fix);
        sci5.add(Param); sci5.add(Stat);
        sci6.add(X_Y); sci6.add(POP);
        sci7.add(Roll);sci7.add(clr);

        keyboard.add(sci1);
        keyboard.add(sci2);
        keyboard.add(sci3);
        keyboard.add(sci4);
        keyboard.add(sci5);
        keyboard.add(sci6);
        keyboard.add(num_7);
        keyboard.add(num_8);
        keyboard.add(num_9);
        keyboard.add(divide);
        keyboard.add(sci7);
        keyboard.add(num_4);
        keyboard.add(num_5);
        keyboard.add(num_6);
        keyboard.add(multiply);
        keyboard.add(delete);
        keyboard.add(num_1);
        keyboard.add(num_2);
        keyboard.add(num_3);
        keyboard.add(minus);
        keyboard.add(ent);
        keyboard.add(num_0);
        keyboard.add(dot);
        keyboard.add(polyn);
        keyboard.add(add);

        add(BorderLayout.NORTH, display);
        add(BorderLayout.CENTER, keyboard);

        iniToolbar();

        show();
        showXYST(normalal.getLastFourValues());
        showTextbar(0);
    }

    private void iniToolbar() {
        getToolbar().addCommandToSideMenu ("  +", null, (e) -> {
            String num;
            if (!command.isEmpty() && command.charAt(0) != '*') {
                Double x = Double.parseDouble(command);
                normalal.pop();
                normalal.push(x);
            }
            command = "";
            if (list.getAllList().isEmpty()) {
                num = "1";
            } else {
                num = list.getAllList().lastElement().substring(4);
                num = Integer.toString(Integer.parseInt(num) + 1);
            }
            list.saveList("List"+num);
            createFileEntry(list.getCurList());
        });

        for(String file : list.getAllList()) {
            if (!file.isEmpty()) {
                createFileEntry(file);
            }
        }
    }

    private void createFileEntry(String file) {
        Label fileField = new Label(file);
        Button delete = new Button();
        Button view = new Button();
        FontImage.setMaterialIcon(delete, FontImage.MATERIAL_DELETE);
        FontImage.setMaterialIcon(view, FontImage.MATERIAL_OPEN_IN_NEW);
        Container content = BorderLayout.center(fileField);
        content.add(BorderLayout.EAST, BoxLayout.encloseX( delete, view));
        delete.addActionListener((e) -> {
            list.deleteList(file);
            content.removeAll();
            getToolbar().closeLeftSideMenu();
        });
        view.addActionListener((e) -> {
            normalal.clear();
            list.loadList(file);
            getToolbar().closeLeftSideMenu();
            showXYST(normalal.getLastFourValues());
            showTextbar(0);
            command = "";
        });
        getToolbar().addComponentToLeftSideMenu(content);
    }

    private void showX(String x) {
        TextComponent tex = new TextComponent().label("X:" + x + "_");
        xRegister.removeAll();
        xRegister.add(tex);
        show();
    }

    private void showXYST(Vector<Double> xyst) {
        DecimalFormat df;

        if (decPlaces == 0) {
            df = new DecimalFormat("#0");
        } else if (decPlaces == 2) {
            df = new DecimalFormat("#0.00");
        } else {
            df = new DecimalFormat("#0.000");
        }

        TextComponent x = new TextComponent().label("X:" + df.format(xyst.get(0)));
        TextComponent y = new TextComponent().label("Y:" + df.format(xyst.get(1)));
        TextComponent s = new TextComponent().label("S:" + df.format(xyst.get(2)));
        TextComponent t = new TextComponent().label("T:" + df.format(xyst.get(3)));
        xRegister.removeAll();
        yRegister.removeAll();
        sRegister.removeAll();
        tRegister.removeAll();
        xRegister.add(x);
        yRegister.add(y);
        sRegister.add(s);
        tRegister.add(t);
        show();
    }

    private void fix() {
        if (decPlaces == 0) {
            decPlaces = 2;
        } else if (decPlaces == 2) {
            decPlaces = 3;
        } else {
            decPlaces = 0;
        }
    }

    private void showTextbar(int i ){
        TextComponent q;
        if (i == 0){
            q = new TextComponent().label("Stack Size:" + normalal.getCursize());
        } else if (i == 1){
            DecimalFormat df = new DecimalFormat("#0.00");
            q = new TextComponent().label(
                    "H:" + df.format(curveal.getStatData().get(0))
                    + " M:" + df.format(curveal.getStatData().get(1))
                    + " L:" + df.format(curveal.getStatData().get(2))
                    + " Med:" + df.format(curveal.getStatData().get(3))
                    + " Mod:" + df.format(curveal.getStatData().get(4))
            );
        } else {
            DecimalFormat df = new DecimalFormat("#0.00");
            q = new TextComponent().label(
                    " SD:" + df.format(curveal.getStatData().get(0))
                    + " A:" + df.format(curveal.getStatData().get(1))
                    + " B:" + df.format(curveal.getStatData().get(2))
                    + " C:" + df.format(curveal.getStatData().get(3))
                    + " D:" + df.format(curveal.getStatData().get(4))
            );
        }
        textbar.removeAll();
        textbar.add(q);
        show();
    }
}

class List extends Stack {
    private Vector<String> list;
    private String curlistname;
    private int size;

    public List() {
        list = new Vector<String>();
        curlistname = new String("No list loaded");
        String allList = Preferences.get("allList", null);
        String listname = "";

        if (!allList.isEmpty()) {
            allList += "!";
            for (int i = 0; i < allList.length(); i++) {
                if (allList.charAt(i) != '!') {
                    listname += allList.charAt(i);
                } else {
                    list.add(listname);
                    listname = "";
                }
            }
            if (list.elementAt(0).equals("")) {
                list.remove(0);
            }
        }

        size = list.size();
    }

    public void saveList(String listname){
        String data = stack.toString();
        data = data.substring(1,data.length()-1).replace(","," ") + " "+ getCursize();
        Preferences.set(listname, data);
        Preferences.set("allList",Preferences.get("allList",null)+"!"+ listname);
        list.add(listname);
        size++;
        curlistname = listname;
    }

    public void loadList(String listname){
        String data = Preferences.get(listname,null);
        data += " ";
        String num = "";
        for (int i = 0; i < data.length(); i++) {
            char c = data.charAt(i);
            if (c != ' ') {
                num += c;
            } else {
                if (!num.isEmpty()) {
                    push(Double.parseDouble(num));
                    num = "";
                }
            }
        }
        curlistname = listname;
        setCursize((int)pop());
    }

    public void deleteList(String listname) {
        Preferences.delete(listname);
        list.removeElement(listname);
        String allList = new String("");
        for (String i:list){
            allList += i;
            allList += "!";
        }
        if (!allList.isEmpty()) {
            allList = allList.substring(0, allList.length() - 1);
        }
        Preferences.set("allList", allList);
        size--;
    }

    public Vector<String> getAllList() {
        return (Vector)list.clone();
    }

    public String getCurList() {
        return curlistname;
    }

    public int getSize() {
        return size;
    }
}

